package com.controllers;import com.google.gson.Gson;import com.models.ConfirmationToken;import com.models.User.UserDTO;import com.properties.FileStorageProperties;import com.repositorys.ConfirmationTokenRepository;import com.responses.UserVerificationResponse;import com.services.EmailSenderService;import com.services.FileStorageService;import com.services.UserService;import com.transoformers.UserUserDTO;import lombok.RequiredArgsConstructor;import lombok.extern.slf4j.Slf4j;import org.springframework.core.io.Resource;import org.springframework.http.HttpHeaders;import org.springframework.http.MediaType;import org.springframework.http.ResponseEntity;import org.springframework.mail.SimpleMailMessage;import org.springframework.web.bind.annotation.*;import org.springframework.web.multipart.MultipartFile;import javax.servlet.http.HttpServletRequest;import java.io.IOException;import java.net.MalformedURLException;import java.nio.file.Files;import java.nio.file.Paths;import java.util.Calendar;import java.util.List;@Slf4j@CrossOrigin@RestController@RequiredArgsConstructor@RequestMapping("/api/user")public class UserController {    private final FileStorageService fileStorageService;    private final UserService userService;    private final FileStorageProperties fileStorageProperties;    private final ConfirmationTokenRepository confirmationTokenRepository;    private final EmailSenderService emailSenderService;    private final UserUserDTO converter;    //private final UserRepository userRepository;    @PostMapping(consumes = {"multipart/mixed", "multipart/form-data"})    public UserVerificationResponse save(@RequestParam("object") String userJSON,                                         @RequestParam("file") MultipartFile file) {        Gson gson = new Gson();        UserDTO userDTO = gson.fromJson(userJSON, UserDTO.class);        String fileName = fileStorageService.storeFile(file);        userDTO.setImage(fileName);        final String confirmTokenEndpoint = "http://localhost:8080/api/user/confirm-account?token=";        UserVerificationResponse userVerificationResponse = new UserVerificationResponse();        UserDTO existingUser = userService.findUserByEmail(userDTO.getEmail());        if (existingUser != null) {            userVerificationResponse.setStatus(500);            userVerificationResponse.setMessage("User with this email already exist");            userVerificationResponse.setEmail(userDTO.getEmail());            userVerificationResponse.setUser_id(userDTO.getUser_id());        } else {            userService.save(userDTO);            log.info("save {} at {}", userDTO.getUser_id(), Calendar.getInstance().getTime());            ConfirmationToken confirmationToken = new ConfirmationToken(converter.ConvertToUser(userDTO));            confirmationTokenRepository.save(confirmationToken);            log.info("save Token {} for User {} at {}", confirmationToken.getToken_id(), userDTO,                    Calendar.getInstance().getTime());            SimpleMailMessage mailMessage = new SimpleMailMessage();            mailMessage.setTo(userDTO.getEmail());            mailMessage.setSubject("Complete Registration on khmeet.org!");            mailMessage.setFrom("KHMEET.Khmelnytskyi@gmail.com");            mailMessage.setText("To confirm your account, please click here : "                    + confirmTokenEndpoint + confirmationToken.getConfirmationToken());            emailSenderService.sendEmail(mailMessage);            log.info("send message {} on email {} at {}", mailMessage.getSubject(), userDTO.getEmail(),                    Calendar.getInstance().getTime());            userVerificationResponse.setStatus(200);            userVerificationResponse.setMessage("Successful registration");            userVerificationResponse.setEmail(userDTO.getEmail());            userVerificationResponse.setUser_id(userDTO.getUser_id());        }        return userVerificationResponse;    }    @GetMapping("{id}")    public UserDTO getUserByID(@PathVariable Long id) {        log.info("get {} at {}", userService.getUserByID(id), Calendar.getInstance().getTime());        return userService.getUserByID(id);    }    @PutMapping("{id}")    public void update(@PathVariable Long id, @RequestBody UserDTO userODT) {        userService.update(id, userODT);        log.info("update {} at {}", userODT, Calendar.getInstance().getTime());    }    @GetMapping("/all")    public List<UserDTO> getAllUsers() {        log.info("get all Users at {}", Calendar.getInstance().getTime());        return userService.getAllUsers();    }    @DeleteMapping("{id}")    public void delete(@PathVariable Long id) throws IOException {        log.info("delete {} at {}", userService.getUserByID(id), Calendar.getInstance().getTime());        userService.delete(id);        Files.delete(Paths.get(fileStorageProperties.getUploadDir() + userService.getUserByID(id).getImage()));    }    @GetMapping("/downloadFile/{id}")    public ResponseEntity<Resource> downloadFile(@PathVariable Long id, HttpServletRequest request)            throws MalformedURLException {        String fileName = userService.getUserByID(id).getImage();        Resource resource = fileStorageService.loadFileAsResourse(fileName);        String contentType = null;        try {            contentType = request.getServletContext().getMimeType(resource.getFile().getAbsolutePath());        } catch (IOException ex) {            log.info("Could not determine file type." + fileName + ex);            throw new RuntimeException(ex.getMessage());        }        if (contentType == null) {            contentType = "application/octet-stream";        }        log.info("File downloaded successful" + fileName);        return ResponseEntity.ok().contentType(MediaType.parseMediaType(contentType))                .header(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=\"" + resource.getFilename() + "\"")                .body(resource);    }//    @PostMapping("/registration")//    public UserVerificationResponse registrationUser(@RequestBody User user)//    {//        log.info("post");//        final String confirmTokenEndpoint = "http://localhost:8080/api/user/confirm-account?token=";//        UserVerificationResponse userVerificationResponse = new UserVerificationResponse();//        User existingUser = userRepository.findByEmailIgnoreCase(user.getEmail());//        if(existingUser != null)//        {//            userVerificationResponse.setStatus(500);//            userVerificationResponse.setMessage("User with this email already exist");//            userVerificationResponse.setEmail(user.getEmail());//            userVerificationResponse.setUser_id(user.getUser_id());//        }//        else {//            log.info("try to insert user");//            userRepository.save(user);////            ConfirmationToken confirmationToken = new ConfirmationToken(user);////            log.info("try to insert token");//            confirmationTokenRepository.save(confirmationToken);////            SimpleMailMessage mailMessage = new SimpleMailMessage();//            mailMessage.setTo(user.getEmail());//            mailMessage.setSubject("Complete Registration on khmeet.org!");//            mailMessage.setFrom("KHMEET.Khmelnytskyi@gmail.com");//            mailMessage.setText("To confirm your account, please click here : "//                    + confirmTokenEndpoint + confirmationToken.getConfirmationToken());////            emailSenderService.sendEmail(mailMessage);//            log.info("Successful send!");//            userVerificationResponse.setStatus(200);//            userVerificationResponse.setMessage("Successful registration");//            userVerificationResponse.setEmail(user.getEmail());//            userVerificationResponse.setUser_id(user.getUser_id());//        }//        return userVerificationResponse;//    }    @RequestMapping(value = "/confirm-account", method = {RequestMethod.GET, RequestMethod.POST})    public UserVerificationResponse confirmUserAccount(@RequestParam("token") String confirmationToken) {        UserVerificationResponse userVerificationResponse = new UserVerificationResponse();        ConfirmationToken token = confirmationTokenRepository.findByConfirmationToken(confirmationToken);        if (token != null) {            UserDTO userDTO = userService.findUserByEmail(token.getUser_id().getEmail());            userDTO.setIs_confirmed(true);            userService.save(userDTO);            userVerificationResponse.setMessage("accountVerified");            userVerificationResponse.setStatus(200);            userVerificationResponse.setEmail(userDTO.getEmail());            userVerificationResponse.setUser_id(userDTO.getUser_id());        } else {            userVerificationResponse.setStatus(404);            userVerificationResponse.setMessage("The link is invalid or broken");        }        return userVerificationResponse;    }}